<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Reset Password</title>
  <link rel="preconnect" href="https://fonts.gstatic.com" />
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600;700&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:FILL@0..1&display=swap" rel="stylesheet" />
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Poppins', sans-serif;
    }

    body {
      background: radial-gradient(#fff, #ffd6d6);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .container {
      max-width: 1300px;
      margin: auto;
      padding: 20px;
    }

    .form-container {
      background: #fff;
      width: 400px;
      padding: 30px;
      border-radius: 10px;
      box-shadow: 0 0 20px 0px rgba(0, 0, 0, 0.1);
      margin: 20px auto;
    }

    .form-container h2 {
      text-align: center;
      margin-bottom: 30px;
      color: #555;
      position: relative;
    }

    .form-container h2::after {
      content: '';
      background: #ff523b;
      width: 80px;
      height: 5px;
      border-radius: 5px;
      position: absolute;
      bottom: -10px;
      left: 50%;
      transform: translateX(-50%);
    }

    .input-field {
      margin-bottom: 20px;
      position: relative;
    }

    .input-field label {
      display: block;
      margin-bottom: 5px;
      color: #555;
      font-weight: 500;
    }

    .input-field input {
      width: 100%;
      padding: 12px 40px 12px 15px; /* Added right padding for icon */
      border: 1px solid #ccc;
      border-radius: 30px;
      font-size: 16px;
      outline: none;
      transition: all 0.3s;
    }

    .input-field input:focus {
      border-color: #ff523b;
    }

    .input-field input.error {
      border-color: #ff523b;
    }

    .input-field input.valid {
      border-color: #4CAF50;
    }

    .btn {
      display: inline-block;
      background: #ff523b;
      color: #fff;
      padding: 12px 30px;
      margin: 20px 0;
      border-radius: 30px;
      transition: background 0.3s;
      border: none;
      cursor: pointer;
      width: 100%;
      font-size: 16px;
    }

    .btn:hover {
      background: #563434;
    }

    .error-message {
      color: #ff523b;
      font-size: 14px;
      margin-top: 5px;
      padding-left: 15px;
      height: auto;
      overflow: visible;
      transition: all 0.3s ease;
      display: block;
    }

    .error-message.show {
      height: auto;
      margin-top: 8px;
      display: block;
    }

    .success-message {
      background: rgba(0, 200, 0, 0.1);
      color: #009900;
      padding: 12px;
      margin-bottom: 20px;
      border-radius: 5px;
      text-align: center;
      border: 1px solid #009900;
      transition: all 0.3s ease;
    }

    .error-message.global {
      color: #ff523b;
      padding: 0;
      margin: 0 0 20px 0;
      text-align: center;
      background: transparent;
      border: none;
      font-size: 14px;
      display: block;
      height: auto;
    }

    .fade-out {
      opacity: 0;
      transition: opacity 0.5s ease;
    }

    .material-symbols-outlined {
      font-variation-settings: 'FILL' 0, 'wght' 400, 'GRAD' 0, 'opsz' 24;
      user-select: none;
      position: absolute;
      right: 15px;
      top: 38px; /* Adjusted to align with input field */
      cursor: pointer;
      color: #555;
    }
  </style>
</head>
<body>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
  
  <div class="container">
    <div class="form-container">
      <h2>Reset Password</h2>

      <% if (typeof success !== 'undefined' && success && message) { %>
        <div class="success-message" id="success-message"><%= message %></div>
      <% } %>
    
  <div class="error-message global <%= errorMessage ? '' : 'd-none' %>" id="error-message">
  <%= errorMessage || '' %>
</div>



      <form id="reset-password-form" action="/resetPasswordPost" method="post">
        <input type="hidden" name="email" value="<%= email %>">
        
        <div class="input-field">
          <label for="newPassword">New Password</label>
          <input type="password" name="newPassword" id="newPassword" placeholder="Enter your new password">
          <span class="toggle-password material-symbols-outlined" data-target="newPassword">visibility</span>
        </div>

        <div class="input-field">
          <label for="confirmPassword">Confirm Password</label>
          <input type="password" name="confirmPassword" id="confirmPassword" placeholder="Re-enter your new password">
          <span class="toggle-password material-symbols-outlined" data-target="confirmPassword">visibility</span>
        </div>
        
        <button type="submit" class="btn">Submit</button>
      </form>
    </div>
  </div>

<script>
  // Toggle password visibility
  document.querySelectorAll('.toggle-password').forEach(icon => {
    icon.addEventListener('click', function () {
      const targetId = this.getAttribute('data-target');
      const passwordInput = document.getElementById(targetId);
      const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
      passwordInput.setAttribute('type', type);

      // Change icon text or class
      this.textContent = type === 'password' ? 'visibility' : 'visibility_off';
    });
  });

  // Auto-hide messages after 5 seconds
   const errorMessageEl = document.getElementById('error-message');
   const successMessageEl = document.getElementById('success-message');
   const shouldRedirect = "<%= typeof redirect !== 'undefined' && redirect ? 'true' : 'false' %>";


if (errorMessageEl && errorMessageEl.textContent.trim() !== '') {
  // Don't auto-fade server messages unless it's from JS
  if (!errorMessageEl.classList.contains('from-js')) {
    // Do nothing (prevent fade-out)
  } else {
    setTimeout(() => {
      errorMessageEl.classList.add('fade-out');
      setTimeout(() => {
        errorMessageEl.style.display = 'none';
      }, 500);
    }, 5000);
  }
}

  if (successMessageEl && shouldRedirect === 'true') {
    console.log('entered into redirecting');
    setTimeout(() => {
      successMessageEl.classList.add('fade-out');
      setTimeout(() => {
        successMessageEl.style.display = 'none';
        window.location.href = '/UserLogin';
      }, 500);
    }, 5000);
  }

  // Password validation function
  function isValidPassword(password) {
    const passwordRegex = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&*()_+\-=[\]{};':"\\|,.<>/?]).{7,}$/;
    return passwordRegex.test(password);
  }

  // Add event listener to the form
  const form = document.getElementById('reset-password-form'); // Ensure your form has this ID
 

  if (form) {
    console.log('entered into form');
    
    form.addEventListener('submit', function (e) {
    const password = document.getElementById('newPassword').value.trim()
    const confirmPassword = document.getElementById('confirmPassword').value.trim()
      if (!isValidPassword(password)) {
        e.preventDefault(); // Stop form from submitting
        showError('error-message', 'Password must contain at least 7 characters, one uppercase letter, one number, and one special character');
      }
      
     if (password !== confirmPassword) {
      console.log('entered into password match');
      e.preventDefault();
      showError('error-message', 'Passwords do not match.');
      return;
    }
    });
  }


  function showError(id, message) {
     const el = document.getElementById(id);
  if (el) {
    el.textContent = message;
    el.classList.remove('fade-out');
    el.classList.add('from-js');
    el.classList.remove('d-none');
    el.style.display = 'block';;
    }
  }
</script>

</body>
</html>