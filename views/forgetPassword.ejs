<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Forgot Password</title>
  <link rel="preconnect" href="https://fonts.gstatic.com" />
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600;700&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Poppins', sans-serif;
    }

    body {
      background: radial-gradient(#fff, #ffd6d6);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .container {
      max-width: 1300px;
      margin: auto;
      padding: 20px;
    }

    .form-container {
      background: #fff;
      width: 400px;
      padding: 30px;
      border-radius: 10px;
      box-shadow: 0 0 20px 0px rgba(0, 0, 0, 0.1);
      margin: 20px auto;
    }

    .form-container h2 {
      text-align: center;
      margin-bottom: 30px;
      color: #555;
      position: relative;
    }

    .form-container h2::after {
      content: '';
      background: #ff523b;
      width: 80px;
      height: 5px;
      border-radius: 5px;
      position: absolute;
      bottom: -10px;
      left: 50%;
      transform: translateX(-50%);
    }

    .input-field {
      margin-bottom: 20px;
      position: relative;
    }

    .input-field label {
      display: block;
      margin-bottom: 5px;
      color: #555;
      font-weight: 500;
    }

    .input-field input {
      width: 100%;
      padding: 12px 15px;
      border: 1px solid #ccc;
      border-radius: 30px;
      font-size: 16px;
      outline: none;
      transition: all 0.3s;
    }

    .input-field input:focus {
      border-color: #ff523b;
    }

    .input-field input.error {
      border-color: #ff523b;
    }

    .input-field input.valid {
      border-color: #4CAF50;
    }

    .btn {
      display: inline-block;
      background: #ff523b;
      color: #fff;
      padding: 12px 30px;
      margin: 20px 0;
      border-radius: 30px;
      transition: background 0.3s;
      border: none;
      cursor: pointer;
      width: 100%;
      font-size: 16px;
    }

    .btn:hover {
      background: #563434;
    }

    .back-to-login {
      text-align: center;
      margin-top: 20px;
    }

    .back-to-login a {
      color: #ff523b;
      text-decoration: none;
    }

    .back-to-login a:hover {
      text-decoration: underline;
    }

.error-message {
  color: #ff523b;
  font-size: 14px; /* Slightly larger font */
  margin-top: 5px;
  padding-left: 15px;
  height: auto; /* Changed from 0 to auto */
  overflow: visible; /* Changed from hidden */
  transition: all 0.3s ease;
  display: block; /* Ensure it's displayed */
}

.error-message.show {
  height: auto;
  margin-top: 8px;
  display: block;
}

.success-message {
  background: rgba(0, 200, 0, 0.1);
  color: #009900;
  padding: 12px;
  margin-bottom: 20px;
  border-radius: 5px;
  text-align: center;
  border: 1px solid #009900;
  transition: all 0.3s ease;
}

.error-message.global {
  color: #ff523b;
  padding: 0;
  margin: 0 0 20px 0; /* Adjusted margin */
  text-align: center;
  background: transparent;
  border: none;
  font-size: 14px; /* Match other error messages */
  display: block; /* Ensure it's displayed */
  height: auto; /* Ensure it's visible */
}

.fade-out {
  opacity: 0;
  transition: opacity 0.5s ease;
}

  </style>
</head>
<body>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
  
  <div class="container">
    <div class="form-container">
      <h2>Forgot Password</h2>

      <% if (typeof errorMessage !== 'undefined' && errorMessage) { %>
        <div class="error-message global" id="error-message"><%= errorMessage %></div>
      <% } %>

      <% if (typeof successMessage !== 'undefined' && successMessage) { %>
        <div class="success-message" id="success-message"><%= successMessage %></div>
      <% } %>

      <form id="forgot-form" action="/forgetPasswordPost" method="post">
        <div class="input-field">
          <label for="email"></label>
          <input type="email" name="email" id="email" placeholder="Enter your email"
                 class="<%= typeof emailError !== 'undefined' && emailError ? 'error' : '' %>">
          <% if (typeof emailError !== 'undefined' && emailError) { %>
            <div id="email-error" class="error-message show"><%= emailError %></div>
          <% } else { %>
            <div id="email-error" class="error-message"></div>
          <% } %>
        </div>
        
        <button type="submit" class="btn">Submit</button>
        
        <div class="back-to-login">
          <p>Remember your password? <a href="/login">Login</a></p>
        </div>
      </form>
    </div>
  </div>

  <script>
    document.getElementById('forgot-form').addEventListener('submit', function(event) {
        event.preventDefault();
        
        // Clear previous errors
        clearErrors();
        
        // Validate form
        const isValid = validateForm();
        
        if (isValid) {
            this.submit();
        }
    });

    // Add input event listeners for real-time validation
    document.getElementById('email').addEventListener('input', validateEmailField);

    function clearErrors() {
        document.querySelectorAll('.error-message').forEach(el => {
            el.classList.remove('show');
            el.textContent = '';
        });
        document.querySelectorAll('input').forEach(input => {
            input.classList.remove('error');
        });
    }

    function validateForm() {
        let isValid = true;
        const email = document.getElementById('email').value.trim();

        // Validate email
        if (!email) {
            showError('email-error', 'Email is required');
            document.getElementById('email').classList.add('error');
            isValid = false;
        } else if (!validateEmailFormat(email)) {
            showError('email-error', 'Please enter a valid email address');
            document.getElementById('email').classList.add('error');
            isValid = false;
        }

        return isValid;
    }

    function validateEmailField() {
        const email = this.value.trim();
        const errorElement = document.getElementById('email-error');
        
        if (!email) {
            showError('email-error', 'Email is required');
            this.classList.add('error');
        } else if (!validateEmailFormat(email)) {
            showError('email-error', 'Please enter a valid email address');
            this.classList.add('error');
        } else {
            errorElement.classList.remove('show');
            this.classList.remove('error');
        }
    }

    function showError(id, message) {
        const errorElement = document.getElementById(id);
        errorElement.textContent = message;
        errorElement.classList.add('show');
    }

    function validateEmailFormat(email) {
        const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return re.test(email);
    }

    // Auto-hide messages after 5 seconds
    const errorMessage = document.getElementById('error-message');
    const successMessage = document.getElementById('success-message');

    if (errorMessage) {
        setTimeout(() => {
            errorMessage.classList.add('fade-out');
            setTimeout(() => {
                errorMessage.style.display = 'none';
            }, 500);
        }, 5000);
    }

    if (successMessage) {
        setTimeout(() => {
            successMessage.classList.add('fade-out');
            setTimeout(() => {
                successMessage.style.display = 'none';
            }, 500);
        }, 5000);
    }
  </script>
</body>
</html>