<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>OTP Verification</title>
  <link rel="preconnect" href="https://fonts.gstatic.com" />
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600;700&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Poppins', sans-serif;
    }

    body {
      background: radial-gradient(#fff, #ffd6d6);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .container {
      max-width: 1300px;
      margin: auto;
      padding: 20px;
    }

    .form-container {
      background: #fff;
      width: 400px;
      padding: 30px;
      border-radius: 10px;
      box-shadow: 0 0 20px 0px rgba(0, 0, 0, 0.1);
      margin: 20px auto;
    }

    .form-container h2 {
      text-align: center;
      margin-bottom: 30px;
      color: #555;
      position: relative;
    }

    .form-container h2::after {
      content: '';
      background: #ff523b;
      width: 80px;
      height: 5px;
      border-radius: 5px;
      position: absolute;
      bottom: -10px;
      left: 50%;
      transform: translateX(-50%);
    }

    .input-field {
      margin-bottom: 20px;
      position: relative;
    }

    .input-field label {
      display: block;
      margin-bottom: 5px;
      color: #555;
      font-weight: 500;
    }

    .otp-inputs {
      display: flex;
      justify-content: space-between;
      margin-bottom: 20px;
    }

    .otp-input {
      width: 50px;
      height: 50px;
      text-align: center;
      font-size: 18px;
      border: 1px solid #ccc;
      border-radius: 30px;
      outline: none;
      transition: all 0.3s;
    }

    .otp-input:focus {
      border-color: #ff523b;
    }

    .otp-input.error {
      border-color: #ff523b;
    }

    .btn {
      display: inline-block;
      background: #ff523b;
      color: #fff;
      padding: 12px 30px;
      margin: 20px 0;
      border-radius: 30px;
      transition: background 0.3s;
      border: none;
      cursor: pointer;
      width: 100%;
      font-size: 16px;
    }

    .btn:hover {
      background: #563434;
    }

    .timer {
      text-align: center;
      margin-bottom: 20px;
      color: #555;
    }

    .resend-info {
      text-align: center;
      margin-top: 20px;
      color: #555;
    }

    .error-message {
      color: #ff523b;
      font-size: 14px;
      margin-top: 5px;
      padding-left: 15px;
      height: auto;
      overflow: visible;
      transition: all 0.3s ease;
      display: block;
    }

    .error-message.show {
      height: auto;
      margin-top: 8px;
      display: block;
    }

    .success-message {
     
      color: #009900;
      padding: 0;
      margin-bottom: 20px;
      text-align: center;
       border: none; 
      transition: all 0.3s ease;
    }

    .error-message.global {
      color: #ff523b;
      padding: 0;
      margin: 0 0 20px 0;
      text-align: center;
      background: transparent;
      border: none;
      font-size: 14px;
      display: block;
      height: auto;
    }

    .fade-out {
      opacity: 0;
      transition: opacity 0.5s ease;
    }

    .message {
      margin-bottom: 15px;
      font-size: 15px;
      font-weight: 500;
      text-align: center;
    }

    .success {
      color: #28a745;
    }

    .error {
      color: #dc3545;
    }

    .hidden {
      display: none;
    }
  </style>
</head>
<body>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
  
  <div class="container">
    <div class="form-container">
      <h2>OTP Verification</h2>

      <% if (successMessage) { %>
        <div class="success-message" id="success-message"><%= successMessage %></div>
      <% } %>
      
      <% if (errorMessage) { %>
        <div class="error-message global" id="error-message"><%= errorMessage %></div>
      <% } %>

      <p class="message">Enter the 6-digit OTP sent to <strong><%= userEmail %></strong></p>
      
      <form id="otpForm" action="/otpVerifyPost" method="POST">
        <input type="hidden" name="email" value="<%= userEmail %>">
        <input type="hidden" id="timeLeftField" name="timeLeft" value="60">

        <div class="otp-inputs">
          <input type="text" name="otp1" class="otp-input" maxlength="1" oninput="moveToNext(this, 'otp2')">
          <input type="text" name="otp2" class="otp-input" maxlength="1" oninput="moveToNext(this, 'otp3')">
          <input type="text" name="otp3" class="otp-input" maxlength="1" oninput="moveToNext(this, 'otp4')">
          <input type="text" name="otp4" class="otp-input" maxlength="1" oninput="moveToNext(this, 'otp5')">
          <input type="text" name="otp5" class="otp-input" maxlength="1" oninput="moveToNext(this, 'otp6')">
          <input type="text" name="otp6" class="otp-input" maxlength="1" oninput="moveToNext(this, null)">
        </div>
        
        <div class="timer" id="timer">
          OTP expires in: <span id="time">01:00</span>
        </div>
        
        <button type="button" class="btn" onclick="validateOTP()">Verify</button>
        <button type="button" class="btn" id="resendBtn" disabled style="display: none; background: #ccc;">Resend OTP (<span id="resendCountdown">60</span>s)</button>
      </form>
    </div>
  </div>

<script>
    // Auto-focus first OTP input on page load
    document.querySelector('.otp-input').focus();

    // Auto-move to next input field
    function moveToNext(current, nextFieldName) {
        if (current.value.length === 1) {
            if (nextFieldName) {
                document.getElementsByName(nextFieldName)[0].focus();
            }
        }

        // Highlight empty fields in red
        const otpFields = document.querySelectorAll('.otp-input');
        otpFields.forEach(field => {
            if (!field.value) {
                field.classList.add('error');
            } else {
                field.classList.remove('error');
            }
        });
    }

    // Validate OTP before submission
    function validateOTP() {
        const otpFields = document.querySelectorAll('.otp-input');
        let allFilled = true;

        otpFields.forEach(field => {
            if (!field.value) {
                allFilled = false;
                field.classList.add('error');
            } else {
                field.classList.remove('error');
            }
        });

        const existingError = document.querySelector('.message.error');
        if (existingError) {
            existingError.remove();
        }

        if (allFilled) {
            document.getElementById('otpForm').submit();
        } else {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'message error';
            errorDiv.textContent = 'Please enter the complete OTP';

            const formContainer = document.querySelector('.form-container');
            const form = document.getElementById('otpForm');
            formContainer.insertBefore(errorDiv, form);
        }
    }

    let timeLeft = 60;
    let timerInterval; // Define as a global variable
    const timerElement = document.getElementById('time');
    const resendBtn = document.getElementById('resendBtn');
    const resendCountdown = document.getElementById('resendCountdown');

    function startTimer() {
        // Inside startTimer interval
       document.getElementById('timeLeftField').value = timeLeft;

        clearInterval(timerInterval); // Clear any existing interval

        timerInterval = setInterval(() => {
            timeLeft--;

            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;

            if (timeLeft <= 0) {
                clearInterval(timerInterval);
                timerElement.textContent = 'Expired';

                document.querySelectorAll('.otp-input').forEach(input => {
                    input.disabled = true;
                });

                if (resendCountdown) resendCountdown.textContent = '';
                if (resendBtn) {
                    resendBtn.disabled = false;
                    resendBtn.textContent = 'Resend OTP';
                    resendBtn.style.display = 'inline-block';
                    resendBtn.style.background = '#ff523b';
                }

                return;
            }

            timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            if (resendCountdown) resendCountdown.textContent = timeLeft;
        }, 1000);
    }

    // Start timer on initial page load
    startTimer();

    // Resend OTP handler
    if (resendBtn) {
        resendBtn.addEventListener('click', () => {
            fetch('/resendOtpPost', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ email: '<%= userEmail %>' })
            })
            .then(response => {
                if (response.redirected) {
                    window.location.href = response.url;
                    return;
                }

                document.querySelectorAll('.otp-input').forEach(input => {
                    input.disabled = false;
                    input.value = '';
                });

                timeLeft = 60;
                timerElement.textContent = '01:00';
                resendBtn.disabled = true;
                resendBtn.style.display = 'none';

                startTimer(); // Restart timer here
            })
            .catch(error => console.error('Error:', error));
        });
    }

    // Auto-hide messages after 5 seconds
    const errorMessageEl = document.getElementById('error-message');
    const successMessageEl = document.getElementById('success-message');

    if (errorMessageEl) {
        setTimeout(() => {
            errorMessageEl.classList.add('fade-out');
            setTimeout(() => {
                errorMessageEl.style.display = 'none';
            }, 500);
        }, 5000);
    }

    if (successMessageEl) {
        setTimeout(() => {
            successMessageEl.classList.add('fade-out');
            setTimeout(() => {
                successMessageEl.style.display = 'none';
            }, 500);
        }, 5000);
    }
</script>

</body>
</html>